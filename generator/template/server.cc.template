/*************************************************************
 *
 *  ████████╗██╗██████╗ ██████╗  ██████╗
 *  ╚══██╔══╝██║██╔══██╗██╔══██╗██╔════╝
 *     ██║   ██║██████╔╝██████╔╝██║
 *     ██║   ██║██╔══██╗██╔═══╝ ██║
 *     ██║   ██║██║  ██║██║     ╚██████╗
 *     ╚═╝   ╚═╝╚═╝  ╚═╝╚═╝      ╚═════╝
 *
 * Generated by tirpc framework tirpc_generator.py
 * This file will be overwrite every time
 * File Name: ${FILE_NAME}
 * Create Time: ${CREATE_TIME}
 * Allow Edit: False 
*************************************************************/


#include <google/protobuf/service.h>
#include <exception>
#include <tirpc/common/log.hpp>
${INCLUDE_PB_HEADER}
${INCLUDE_SERVER_HEADER}
${INCLUDE_BUSINESS_EXCEPTION_HEADER}
${INCLUDE_SERVICE_HEADER}
${INCLUDE_INTERFACEBASE_HEADER}

#define CALL_RPC_INTERFACE(type)                                                                                                    \                                                                           
  tirpc::RpcController* con = dynamic_cast<tirpc::RpcController*>(controller);                                      \
  std::shared_ptr<type> impl = std::make_shared<type>(*request, *response, *con);                                                   \
  try {                                                                                                                             \
    APP_LOG_INFO("In|request:{%s}", request->ShortDebugString().c_str());                                                             \
    impl->run();                                                                                                                    \
    response->set_ret_code(0);                                                                                                      \
    response->set_res_info("OK");                                                                                                   \
    APP_LOG_INFO("Out|response:{%s}", response->ShortDebugString().c_str());                                                          \
  } catch (${PROJECT_NAME}::BusinessException& e) {                                                                                 \
    APP_LOG_ERROR("[%s:%d] occur BusinessException, error code=%d, error info = %s",                                                  \
      e.file_name().c_str(), e.line(),  e.code(), e.error().c_str());                                                               \
    response->set_ret_code(e.code());                                                                                               \
    response->set_res_info(e.error());                                                                                              \
    APP_LOG_ERROR("Out|response:{%s}", response->ShortDebugString().c_str());                                                         \
  } catch (std::exception&) {                                                                                                       \
    APP_LOG_ERROR("occur std::exception, error code = -1, errorinfo = UnKnown error");                                                \
    response->set_ret_code(-1);                                                                                                     \
    response->set_res_info("UnKnown error");                                                                                        \
    APP_LOG_ERROR("Out|response:{%s}", response->ShortDebugString().c_str());                                                         \
  } catch (...) {                                                                                                                   \
    APP_LOG_ERROR("occur UnKnown exception, error code = -1, errorinfo = UnKnown error");                                             \
    response->set_ret_code(-1);                                                                                                     \
    response->set_res_info("UnKnown error");                                                                                        \
    APP_LOG_ERROR("Out|response:{%s}", response->ShortDebugString().c_str());                                                         \
  }                                                                                                                                 \
  if (done) {                                                                                                                       \
    done->Run();                                                                                                                    \
  }                                                                                                                                 \

namespace ${PROJECT_NAME} {

${METHOD}

}