/*************************************************************
 *
 *  ████████╗██╗██████╗ ██████╗  ██████╗
 *  ╚══██╔══╝██║██╔══██╗██╔══██╗██╔════╝
 *     ██║   ██║██████╔╝██████╔╝██║
 *     ██║   ██║██╔══██╗██╔═══╝ ██║
 *     ██║   ██║██║  ██║██║     ╚██████╗
 *     ╚═╝   ╚═╝╚═╝  ╚═╝╚═╝      ╚═════╝
 *
 * Generated by tirpc framework tirpc_generator.py
 * This file will not be overwrite althrough protobuf file changed !!!
 * Just write this file while not exist
 * File Name: ${FILE_NAME}
 * Create Time: ${CREATE_TIME}
 * Allow Edit: True
*************************************************************/


#include <google/protobuf/service.h>
#include <tirpc/net/rpc/rpc_channel.hpp>
#include <tirpc/net/rpc/rpc_async_channel.hpp>
#include <tirpc/net/rpc/rpc_controller.hpp>
#include <tirpc/net/rpc/rpc_closure.hpp>
#include <tirpc/net/base/address.hpp>
${INCLUDE_PB_HEADER}


void test_client() {

  tirpc::IPAddress::ptr addr = std::make_shared<tirpc::IPAddress>("127.0.0.1", 12345);

  tirpc::RpcChannel channel(addr);
  ${STUBCLASS} stub(&channel);

  tirpc::RpcController rpc_controller;
  rpc_controller.SetTimeout(5000);

  ${REQUEST_TYPE} rpc_req;
  ${RESPONSE_TYPE} rpc_res;

  std::cout << "Send to tirpc server " << addr->ToString() << ", requeset body: " << rpc_req.ShortDebugString() << std::endl;
  stub.${METHOD_NAME}(&rpc_controller, &rpc_req, &rpc_res, NULL);

  if (rpc_controller.ErrorCode() != 0) {
    std::cout << "Failed to call tirpc server, error code: " << rpc_controller.ErrorCode() << ", error info: " << rpc_controller.ErrorText() << std::endl; 
    return;
  }

  std::cout << "Success get response from tirpc server " << addr->ToString() << ", response body: " << rpc_res.ShortDebugString() << std::endl;

} 

int main(int argc, char* argv[]) {

  test_client();

  return 0;
}
